"use strict";function arraysEqual(a,b){if(a===b)return!0;if(null===a||null===b)return!1;if(a.length!==b.length)return!1;for(var i=0;i<a.length;++i)if(a[i]!==b[i])return!1;return!0}function hasDuplicates(array){return new Set(array).size!==array.length}var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","angular-loading-bar","chart.js"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin"))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){fromState.data&&fromState.data.ignoreState||($state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)})})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("quiz",["ngFileUpload"]),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("quiz",{url:"/{courseName:.+}/quiz",templateUrl:"modules/quiz/client/views/quizTemplate.client.view.html"}).state("quiz.results",{url:"/results",templateUrl:"modules/quiz/client/views/quizResults.client.view.html",params:{correctScore:null,numQuestion:null,category:null}}).state("resources",{url:"/{courseName:.+}/resources",templateUrl:"modules/core/client/views/resources.client.view.html"}).state("question_upload",{url:"/admin/question_upload",templateUrl:"modules/quiz/client/views/quizUpload.client.view.html"}).state("question_edit",{url:"/admin/question_edit",templateUrl:"modules/core/client/views/data.questions.client.view.html"}).state("question_view",{url:"/admin/question_edit/:questionId",templateUrl:"/modules/core/client/views/view-question.client.view.html"}).state("question_create",{url:"/admin/question_add/new",templateUrl:"/modules/core/client/views/create-question.client.view.html"}).state("studentprofile",{url:"/student/{userName:.+}",templateUrl:"modules/core/client/views/profile.client.view.html"}).state("teacherprofile",{url:"/teacher/{userName:.+}",templateUrl:"modules/core/client/views/teacherprofile.client.view.html"}).state("adminprofile",{url:"/admin/{userName:.+}",templateUrl:"modules/core/client/views/adminprofile.client.view.html"}).state("userData",{url:"/data/users",templateUrl:"modules/core/client/views/data.users.client.view.html"}).state("about",{url:"/about",templateUrl:"modules/core/client/views/about.client.view.html"}).state("contact",{url:"/contact",templateUrl:"modules/core/client/views/contact.client.view.html"}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("UserData",["$scope","$http",function($scope,$http){$http.get("/api/data/users").success(function(res){$scope.data=res})}]),angular.module("core").controller("QuestionData",["$scope","$http",function($scope,$http){$http.get("/api/data/questions").success(function(res){$scope.data=res}),$scope.deleteQuestion=function(index){$scope.data.splice(index,1)}}]),angular.module("core").controller("QuestionControl",["$scope","$http","$state","$location","$stateParams","QuizQuestions",function($scope,$http,$state,$location,$stateParams,QuizQuestions){$scope.findQuestions=function(){QuizQuestions.loadQuestions().then(function(response){$scope.questions=response.data})},$scope.findOneQuestion=function(question_obj){var id=$stateParams.questionId;console.log("id is "+id),$http.get("/api/data/questions/"+id).then(function(response){$scope.question=response.data},function(error){$scope.error="Unable to get question!\n"+error})},$scope.createQuestion=function(isValid){if(!isValid)return!1;if("MA"===$scope.type)var quizQuestion={category:$scope.category,type:$scope.type,text:$scope.qtext,answers:{MA:{present:[$scope.ma3,$scope.ma1,$scope.ma5,$scope.ma2,$scope.ma4],correct:[$scope.ma1,$scope.ma2,$scope.ma3,$scope.ma4,$scope.ma5]},MCTF:[$scope.mc1,$scope.mc2,$scope.mc3,$scope.mc4,$scope.mc5]},hint:$scope.hint,link:$scope.link};else if("TF"===$scope.type)var quizQuestion={category:$scope.category,type:$scope.type,text:$scope.qtext,answers:{MCTF:[],correct:$scope.correct},hint:$scope.hint,link:$scope.link};else var quizQuestion={category:$scope.category,type:$scope.type,text:$scope.qtext,answers:{MCTF:[$scope.mc1,$scope.mc2,$scope.mc3,$scope.mc4,$scope.mc5],correct:$scope.correct},hint:$scope.hint,link:$scope.link};$http.post("/api/data/questions",quizQuestion).then(function(response){$scope.findQuestions(),$state.go("question_edit",{successMessage:"Question succesfully added!"})},function(error){$scope.error="Unable to save question!\n"+error})},$scope.updateQuestion=function(question_obj,isValid){var id=question_obj._id;if(!isValid)return!1;if("MA"===$scope.type)var quizQuestion={category:$scope.category,type:$scope.type,text:$scope.qtext,answers:{MA:{present:[$scope.ma3,$scope.ma1,$scope.ma5,$scope.ma2,$scope.ma4],correct:[$scope.ma1,$scope.ma2,$scope.ma3,$scope.ma4,$scope.ma5]},MCTF:[$scope.mc1,$scope.mc2,$scope.mc3,$scope.mc4,$scope.mc5]},hint:$scope.hint,link:$scope.link};else if("TF"===$scope.type)var quizQuestion={category:$scope.category,type:$scope.type,text:$scope.qtext,answers:{MCTF:[],correct:$scope.correct},hint:$scope.hint,link:$scope.link};else var quizQuestion={category:$scope.category,type:$scope.type,text:$scope.qtext,answers:{MCTF:[$scope.mc1,$scope.mc2,$scope.mc3,$scope.mc4,$scope.mc5],correct:$scope.correct},hint:$scope.hint,link:$scope.link};$http.put("/api/data/questions/"+id,quizQuestion).then(function(response){$scope.findQuestions(),$state.go("question_edit",{successMessage:"Question succesfully added!"})},function(error){$scope.error="Unable to save question!\n"+error})},$scope.removeQuestion=function(question_obj){var id=question_obj._id;$http["delete"]("api/data/questions/"+id).success(function(response){$scope.findQuestions(),$state.go("question_edit",{successMessage:"Question succesfully deleted!"})}).error(function(response){$scope.error="Unable to delete question!\n"+response,console.log(response)})}}]),angular.module("core").controller("SubjectData",["$scope","$http",function($scope,$http){$http.get("/api/parse/subjects").success(function(res){$scope.data=res})}]),angular.module("core").controller("ResourceData",["$scope","$http",function($scope,$http){$http.get("/api/parse/resources").success(function(res){$scope.data=res})}]),angular.module("core").controller("HeaderController",["$scope","$state","$location","Authentication","NavCrumbs",function($scope,$state,$location,Authentication,NavCrumbs){$scope.$state=$state,$scope.authentication=Authentication,$scope.breadcrumb=NavCrumbs.breadcrumb,$scope.click=function(crumb){$location.url(crumb.url)},$scope.profile=function(){"Teacher"===$scope.authentication.user.profileType?$location.url("/teacher/"+$scope.authentication.user.userName):"Admin"===$scope.authentication.user.profileType?$location.url("/admin/"+$scope.authentication.user.userName):$location.url("/student/"+$scope.authentication.user.userName)},$scope.logout=function(){$scope.authentication.user=null,$location.url("/")}}]),angular.module("core").controller("MainController",["$scope","$state","$location","Authentication","$http","Subjects","Users",function($scope,$state,$location,Authentication,$http,Subjects,Users){$scope.ready=function(){$scope.carousel({interval:1200})},$scope.authentication=Authentication,Subjects.loadSubjects().then(function(response){$scope.subjects=response.data}),$scope.gotoQuiz=function(subjectObj){$location.path("/"+subjectObj.name+"/quiz")},$scope.gotoResource=function(subjectObj){$location.path("/"+subjectObj.name+"/resources")}}]),angular.module("core").controller("SubjectController",["$scope","$http","$state","$location","Authentication","$stateParams","Resources","Subjects","SubHeads","$window",function($scope,$http,$state,$location,Authentication,$stateParams,Resources,Subjects,SubHeads,$window){$scope.authentication=Authentication,$scope.subject=$stateParams.courseName,$scope.success=null,$scope.error=null,null==$scope.authentication.user?$scope.editMode=!1:"Admin"===$scope.authentication.user.profileType&&($scope.editMode=!0),$scope.updateMode=!1,$scope.ResourceField=!0,$scope.isAdmin=!1,Subjects.loadSubjects().then(function(response){$scope.subjects=response.data}),Resources.loadResources().then(function(response){$scope.resources=response.data}),SubHeads.loadSubHeads().then(function(response){$scope.subHeads=response.data}),$scope.addResource=function(){$scope.newResource.clicks=0;var name=$scope.newResource.title;$http.post("api/data/resources",$scope.newResource).success(function(response){Resources.loadResources().then(function(response){$scope.resources=response.data,$scope.success=name+" Successfully Added."})}).error(function(response){$scope.error=name+" Unsuccessfully added."}),$scope.newResource=null},$scope.deleteResource=function(resource_obj){var id=$scope.deleteResourceObj._id,name=$scope.deleteResourceObj.title;$http["delete"]("api/data/resources/"+id).success(function(response){Resources.loadResources().then(function(response){$scope.resources=response.data}),$scope.success=name+" Successfully Deleted."}).error(function(response){$scope.error=name+" Unsuccessfully Deleted."}),$scope.newResource=null},$scope.getDeleteResource=function(resource_obj){$scope.deleteResourceObj=resource_obj},$scope.updateResource=function(resource_obj){var id=resource_obj._id,name=resource_obj.title;$http.put("api/data/resources/"+id,$scope.newResource).success(function(response){$scope.newResource={},$scope.updateMode=!1,$scope.success=name+" Successfully Edited."}).error(function(response){$scope.error=name+" Unsuccessfully Edited."})},$scope.addSubHead=function(){var name=$scope.newSubHead.title;$http.post("api/data/subHeads",$scope.newSubHead).success(function(response){SubHeads.loadSubHeads().then(function(response){$scope.subHeads=response.data}),$scope.success=name+" Successfully Added."}).error(function(response){$scope.error=$scope.newSubHead.title+" Unsuccessfully Added."}),$scope.newSubHead=null},$scope.deleteSubHead=function(subHead_obj){var id=$scope.deleteSubHeadObj._id,name=$scope.deleteSubHeadObj.title;$http["delete"]("api/data/subheads/"+id).success(function(response){SubHeads.loadSubHeads().then(function(response){$scope.subHeads=response.data}),$scope.success=name+" Successfully Deleted."}).error(function(response){$scope.error=name+" Unsuccessfully Deleted."}),$scope.newResource=null},$scope.getDeleteSubHead=function(subHead_obj){$scope.deleteSubHeadObj=subHead_obj},$scope.updateSubHead=function(subHead_obj){var id=subHead_obj._id;$http.put("api/data/subheads/"+id,$scope.newSubHead).success(function(response){$scope.success=$scope.newSubHead.title+" Successfully Edited.",$scope.newSubHead={},$scope.updateMode=!1}).error(function(response){$scope.error=$scope.newSubHead.title+" Unsuccessfully Edited."})},$scope.editResource=function(resource_obj){$scope.updateMode=!0,$scope.newResource=resource_obj,$scope.updateID=resource_obj._id,$scope.ResourceField=!0,$scope.setEditHeading()},$scope.editSubHead=function(subHead_obj){$scope.updateMode=!0,$scope.newSubHead=subHead_obj,$scope.updateSubHeadID=subHead_obj._id,$scope.ResourceField=!1,$scope.setEditHeading()},$scope.clearResourceField=function(){$scope.newResource={},$scope.newSubHead={},$scope.updateMode=!1,$scope.setEditHeading()},$scope.setEditHeading=function(){$scope.updateMode===!1?$scope.editHeading="Create A New Heading / Link":$scope.editHeading="Edit An Existing Heading / Link"},$scope.setEditHeading(),$scope.clearSuccessMessage=function(){$scope.success=null},$scope.clearErrorMessage=function(){$scope.error=null},$scope.recordClick=function(resource_obj,index,link_url){var id=resource_obj._id;resource_obj.title;null!==$scope.authentication.user&&"Student"===$scope.authentication.user.profileType&&$http.put("api/data/resources/click/"+id,resource_obj).success(function(response){}).error(function(response){}),$scope.resources[index].clicks=$scope.resources[index].clicks+1,$window.open(link_url,"_blank")},$scope.startQuiz=function(){$location.path("/"+$scope.subject+"/quiz")}}]),angular.module("core").controller("authController",["$scope","$state","$location","Users","Authentication","$http",function($scope,$state,$location,Users,Authentication,$http){$scope.authentication=Authentication,$scope.user=$scope.authentication.user,$scope.isTeacher=!1,$scope.isAdmin=!1,"Admin"===$scope.authentication.user.profileType?(console.log("I am a admin"),$scope.isAdmin=!0):"Teacher"===$scope.authentication.user.profileType&&(console.log("I am a teacher"),$scope.isTeacher=!0)}]),angular.module("core").controller("ProfileController",["$scope","$state","$location","Users","Authentication","$http","Subjects","Temp","plotly","ResourceClicks","Comments","Upload",function($scope,$state,$location,Users,Authentication,$http,Subjects,Temp,plotly,ResourceClicks,Comments,Upload){$scope.mikes=0,$scope.myFunction=function(){console.log($scope.mikes);var path="/api/its"+i,data={comments:[{words:$scope.comment,userId:$scope.getCurrentUser().name}]};$http.put(path,data).success(function(stuff){document.location.reload(!0)})},$scope.myFunction=function(mikes){console.log("Hi Hi Hi"),console.log($scope.mikes);var a=parseInt($scope.mikes);$scope.user.courseCode.push(a);var route="/api/auth/signup/student";$http.post(route,$scope.credentials).success(function(response){$scope.authentication.user=response,$location.url("/")}).error(function(response){console.log("Invalid (Sign up)",response),alert("Use a valid course code. For testing, check the database for a teacher and use their course numbers."),$scope.error=response.message})},$(document).ready(function(){$("#myBtn").click(function(){$("#myModal").modal()})}),$scope.getComs=function(){$http.get("/api/leave_comment").success(function(res){console.log(res)})},Comments.loadComments().then(function(response){$scope.Comments=response.data}),$scope.authentication=Authentication,$scope.user=$scope.authentication.user,$scope.oneAtATime=!0,$scope.isTeacher=!1,$scope.isAdmin=!1,$scope.profileVisible=!0,"Teacher"===$scope.authentication.user.profileType?$scope.isTeacher=!0:"Admin"===$scope.authentication.user.profileType&&($scope.isAdmin=!0),$scope.input={},$scope.input.courseNums=[],$scope.input.courseNames=[],$scope.input.coursePeriods=[],Subjects.loadSubjects().then(function(response){$scope.subjects=response.data});var ctx1,myClicksChart;"Admin"===$scope.authentication.user.profileType&&(ctx1=$("#myClicksChart").get(0).getContext("2d")),$scope.viewClicks=function(subject){var route="/api/data/resources/clicks";$http.get(route,{params:{subject:subject}}).then(function(res){void 0!==myClicksChart&&myClicksChart.destroy();for(var clicks=res.data,click_labels=[],click_data=[],i=0;i<clicks.length;i++)click_labels.push(clicks[i].name),click_data.push(clicks[i].clicks);var data={labels:click_labels,datasets:[{label:"Number of Clicks",fillColor:"rgba(220,220,220,0.5)",strokeColor:"rgba(220,220,220,0.8)",highlightFill:"rgba(220,220,220,0.75)",highlightStroke:"rgba(220,220,220,1)",data:click_data}]};myClicksChart=new Chart(ctx1).Bar(data)})};var ctx2,myQuizStatsChart;if("Admin"===$scope.authentication.user.profileType&&(ctx2=$("#myQuizStatsChart").get(0).getContext("2d")),$scope.viewQuizStats=function(subject){var route="/api/data/adminGrades";$http.get(route,{params:{subject:subject}}).then(function(res){void 0!==myQuizStatsChart&&myQuizStatsChart.destroy();for(var labels=[],questNames=[],ques_names=1;ques_names<res.data.question_names.length+1;ques_names++)labels.push("Question "+ques_names),questNames.push(ques_names+". "+res.data.question_names[ques_names-1]);var data={labels:labels,datasets:[{label:"Percent Correct",fillColor:"rgba(204, 167, 148,0.5)",strokeColor:"rgba(204, 167, 148,0.8)",highlightFill:"rgba(204, 167, 148,0.75)",highlightStroke:"rgba(204, 167, 148,1)",data:res.data.perc_correct}]};myQuizStatsChart=new Chart(ctx2).Bar(data,{scaleOverride:!0,scaleStartValue:0,scaleStepWidth:.1,scaleSteps:10}),$scope.questNames=questNames,$scope.averageAttempts=res.data.avgs,$scope.firstIncorrect=res.data.modes})},"Admin"!==$scope.authentication.user.profileType&&$scope.authentication.user.courses.forEach(function(element,index,array){$scope.input.courseNames.push(element.courseName),$scope.input.courseNums.push(element.number),$scope.input.coursePeriods.push(element.section)}),$scope.input.coursesComplete=$scope.authentication.user.courses,$scope.credentials={},$scope.credentials.courses=[],$scope.hello=0,$scope.classNames=[],$scope.Periods=[],$scope.classCodes=[],$scope.classQuiz=[],$scope.classPeriods=[],"Admin"!==$scope.authentication.user.profileType){var teachersCurrentClasses=$scope.authentication.user.courses;console.log(teachersCurrentClasses);for(var k=0;k<teachersCurrentClasses.length;k++){var label=teachersCurrentClasses[k].courseName;$scope.classQuiz.push(label),$scope.classCodes.push(teachersCurrentClasses[k].number)}}Subjects.loadSubjects().then(function(response){$scope.subjects=response.data;for(var i=0;i<$scope.subjects.length;i++)$scope.classNames.push($scope.subjects[i].name);for(var j=1;j<$scope.subjects.length;j++)$scope.Periods.push("Period "+j),$scope.classPeriods.push("Period "+j)}),$scope.newclassNames=["Biotechnology 1","Biotechnology 2","Biotechnology 3","PLTW Principles of Biomedical Science","PLTW Human Body Systems","PLTW Medical Interventions","PLTW Biomedical Innovation","Agricultural Biotechnology","Biology","Honors Biology","AP Biology","AICE Biology","IB Biology","Genetics","Forensics","Other"],$scope.uploadFiles=function(file,errFiles){console.log("uploading photo..."),$scope.f=file,$scope.errFile=errFiles&&errFiles[0];var data={file:file};file&&(file.upload=Upload.upload({url:"/photo_upload",data:data}),file.upload.then(function(response){console.log("Photo upload:",response.data.message),200==response.status&&$(".user-pic").attr("src",response.data.url)}))},$scope.exportToCSV=function(subject){var CSV="",route="/api/data/adminGrades";CSV+="Statistics for "+subject+"\r\n\n",$http.get(route,{params:{subject:subject}}).then(function(res){for(var g=0;g<res.data.avgs.length;g++)CSV+="question: "+g+"\n\n",CSV+="averages , "+res.data.avgs[g]+" , ",CSV+="modes , "+res.data.modes[g]+" , ",CSV+="% correct , "+res.data.perc_correct[g]+"\n",console.log(g);if(CSV+="\r\n\n",""==CSV)return void alert("Invalid data");var fileName="Statistics",ReportTitle="Quiz Statistics";fileName+=ReportTitle.replace(/ /g,"_");var uri="data:text/csv;charset=utf-8,"+escape(CSV),link=document.createElement("a");link.href=uri,link.style="visibility:hidden",link.download=fileName+".csv",document.body.appendChild(link),link.click(),document.body.removeChild(link)})},$scope.add=function(course,period){if(""!==course){var courseObj={};courseObj.courseName=course,courseObj.content="",courseObj.progress="",courseObj.section=period,courseObj.number=Math.floor(1e3*Math.random()+1),$scope.authentication.user.courses.push(courseObj)}$scope.authentication.user.courses.forEach(function(element,index,array){}),$scope.input={},$scope.input.courseNums=[],$scope.authentication.user.courses.forEach(function(element,index,array){$scope.input.courseNums.push(element.courseName+" : "+element.number+" : "+element.section)}),console.dir($scope);var route="/api/users/"+$scope.authentication.user._id;$http.put(route,$scope.user.courses).success(function(response){$scope.authentication.user=response,$location.url("/")}).error(function(response){console.dir(response),$scope.error=response.message}),$scope.toAdd=""},$scope.settingsupdate=function(isValid){$scope.error=null;var route="/api/users/"+$scope.authentication.user._id;void 0!==$scope.credentials.firstName&&($scope.authentication.user.firstName=$scope.credentials.firstName),void 0!==$scope.credentials.lastName&&($scope.authentication.user.lastName=$scope.credentials.lastName),void 0!==$scope.credentials.userName&&($scope.authentication.user.userName=$scope.credentials.userName),void 0!==$scope.credentials.email&&($scope.authentication.user.email=$scope.credentials.email),void 0!==$scope.credentials.password&&($scope.authentication.user.password=$scope.credentials.password),$scope.authentication.user.displayName=$scope.authentication.user.lastName+", "+$scope.authentication.user.firstName,$scope.credentials.password===$scope.confirmpassword?$http.post(route,$scope.user).success(function(response){$scope.authentication.user=response}).error(function(response){console.dir("response: "+response),$scope.error=response.message}):$("#settingsMoodal").modal()},$scope.update=function(){$scope.error=null;var user=$scope.user;console.log("user= "+user.email),user.$update(function(){console.log("home controller update")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.sendEmail=function(isValid){var data={subject:$scope.resource.subject,subheading:$scope.resource.subjectdetails,link:$scope.resource.resourcelink,comments:$scope.resource.comments,email:$scope.resource.email},route="/api/data/email";$http.post(route,data).success(function(req,res){console.log("sending email")})},$scope.groups=[{title:"Cells",content:"Lesson 4: The Nucleus",progress:0},{title:"Biology",content:"Lesson 2: Ecosystems",progress:25},{title:"Chemistry",content:"Lesson 13: Electron Mobility",progress:75}],$scope.items=["Item 1","Item 2","Item 3"],$scope.status={isFirstOpen:!0,isFirstDisabled:!1},$scope.$on("creation",function(event,args){console.log(args),$scope.test="testing",console.log($scope.section),$scope.section=args.firstName,console.log($scope.section)}),$scope.studentGrades=[],$http.get("/api/quiz_result").success(function(res){byStudent(res)});var byStudent=function(allStudentGrades){for(var i=0;i<allStudentGrades.length;i++)allStudentGrades[i].studentName===$scope.user.userName&&($scope.studentGrades.push(allStudentGrades[i]),"Applications"===allStudentGrades[i].category&&$scope.groups[0].progress++);$scope.groups[0].progress*=25};$scope.viewStats=function(classname,code,quiz){console.log("Passing: "+classname);var route="/api/data/plot";$http.get(route,{params:{person:$scope.user,quiz:quiz,classname:classname,code:code}}).then(function(res){for(var label=[],i=0;i<res.data.length;i++){var number=i+1;label[i]="Question "+number}var ctx=$("#myChart").get(0).getContext("2d"),data={labels:label,datasets:[{label:"Course Settings",fillColor:"blue",strokeColor:"rgba(220,220,220,0.8)",data:res.data}]},options={responsive:!1,maintainAspectRatio:!0,barShowStroke:!1};new Chart(ctx).Bar(data,options)}).then(function(error){console.log("Plot eror"+error)})},$scope.resetCodes=function(){var d=new Date,dlog=d.getDate(),mlog=(new Date,d.getMonth()),hlog=(new Date,d.getHours()),mi=new Date,milog=mi.getMinutes(),s=new Date;s.getSeconds();1===dlog&&7===mlog&&0===hlog&&0===milog&&0===s&&Temp.parseUsers().then(function(response){function updateresetCodes(newuser){var route="/api/users/no";$scope.put(route,newuser.courses).success(function(response){}).error(function(response){console.log("Unable to PUT."),console.dir(response),$scope.error=response.message})}$scope.users=response.data;for(var i=0;i<$scope.users.length;i++){for(;$scope.users[i].courses.length>0;)$scope.users[i].courses.pop();updateresetCodes($scope.users[i])}})},$scope.resetAllCodes=function(){var d=new Date,dlog=d.getDate(),mlog=(new Date,d.getMonth());if(1===dlog&&7===mlog){for(;$scope.authentication.user.courses.length>0;)$scope.authentication.user.courses.pop();var route="/api/users/"+$scope.authentication.user._id;$http.put(route,$scope.user.courses).success(function(response){$scope.authentication.user=response,$location.url("/")}).error(function(response){console.log("Unable to PUT."),console.dir(response),$scope.error=response.message})}}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("quiz").directive("readCSVFile",["$parse",function($parse){return console.log("hello"),{restrict:"A",scope:!1,link:function(scope,element,attrs){var fn=$parse(attrs.onReadFile);element.on("change",function(onChangeEvent){var reader=new FileReader;reader.onload=function(onLoadEvent){scope.$apply(function(){fn(scope,{$fileContent:onLoadEvent.target.result})})},reader.readAsText((onChangeEvent.srcElement||onChangeEvent.target).files[0])})}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Subjects",["$http",function($http){return this.questionsForSubject=[{}],this.loadQuestions=function(){$http({method:"GET",url:"/api/question-data/"}).success(function(res){})},this.subjectClicked=function(subject){this.getSubjectByName(subject);this.questionsForSubject=this.loadQuestions()},this.getSubjectByName=function(subjectName){return this.subjects.forEach(function(elem,index,array){return elem.name===subjectName?elem:void 0}),null},{loadSubjects:function(){return $http({method:"GET",url:"/api/parse/subjects"})}}}]),angular.module("core").service("QuizQuestions",["$http",function($http){return{loadQuestions:function(){return $http({method:"GET",url:"/api/data/questions"})}}}]),angular.module("core").service("Resources",["$http",function($http){return{loadResources:function(){return $http({method:"GET",url:"/api/parse/resources"})}}}]),angular.module("core").service("ResourceClicks",["$http",function($http){return{loadClicks:function(){return $http({method:"GET",url:"/api/parse/resources/clicks"})}}}]),angular.module("core").service("SubHeads",["$http",function($http){return{loadSubHeads:function(){return $http({method:"GET",url:"/api/parse/subheads"})}}}]),angular.module("core").service("Comments",["$http",function($http){return{loadComments:function(){return $http({method:"GET",url:"/api/get_Comments"})}}}]),angular.module("core").service("Temp",["$http",function($http){return{parseUsers:function(){return $http({method:"GET",url:"/api/parse/user"})}}}]),angular.module("core").service("plotly",["$http",function($http){}]),angular.module("core").service("NavCrumbs",[function(){this.breadcrumb=[{name:"Home",url:"/"}]}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),$(document).ready(function(){$("body").on("click","#next.btn",function(){var hasError=angular.element("#quizError").scope().$parent.hasError,isDone=angular.element("#quizError").scope().$parent.isDone,isMC=angular.element("#quizError").scope().$parent.isMultipleChoice;hasError||isDone||!isMC||setTimeout(function(){$('input[type="radio"]').prop("checked",!1)},35)})}),angular.module("quiz").controller("QuizController",["$rootScope","$scope","$location","$stateParams","$state","Authentication","$http","$window",function($rootScope,$scope,$location,$stateParams,$state,Authentication,$http,$window){console.log("Loading Qs:",$stateParams.courseName);var courseName=$stateParams.courseName;
switch(courseName){case"Chemistry & Biochemistry":courseName="Chemistry/Biochemistry";break;case"General Topics":courseName="General Topics in Biotechnology";break;case"Laboratory Skills and Applications":courseName="Laboratory Skills/Applications";break;case"Research and Scientific Method":courseName="Research & Scientific Method"}$http.get("/api/quiz",{params:{category:courseName}}).then(function(listOfQuestions){byCategory(listOfQuestions.data)}),$scope.authentication=Authentication;var max=0;$scope.isDone=!1,$scope.quizStarted=!1,$scope.questions=[],$scope.index=-1,$scope.score=0,$scope.analytics=[],$scope.numQuestion=0,$scope.hasError=!1,$scope.hasHint=!1,$scope.hasStart=!0,$scope.loggedIn=$scope.authentication.user?!0:!1,$scope.currCategory=$stateParams.courseName,$scope.progress=0,$scope.numOpts=0,$scope.ansMA=[],$scope.answer={val:-1},$scope.changehappened=function(data){$rootScope.$emit("radioSel",data)},$rootScope.$on("radioSel",function(evt,data){$scope.answer=data}),$scope.start=function(){0===max?($scope.error="No questions found.",$scope.hasError=!0,$scope.hasStart=!1):(console.log("Starting quiz."),$scope.quizStarted=!0,$scope.hasStart=!1,$scope.increment(),max=$scope.questions.length-1)},$scope.checkAnswer=function(answer){console.log("Checking answer...");var TF_NoSel=$scope.isTF&&-1===$scope.answer.val,MC_NoSel=$scope.isMultipleChoice&&-1===$scope.answer,MA_NoSel=$scope.isMA&&$scope.ansMA.length<$scope.question.answers.MCTF.length;if(TF_NoSel||MC_NoSel||MA_NoSel)return $scope.hasError=!0,void($scope.error="Please select a valid option.");$scope.analytics[$scope.index]||(console.log("Creating analytics..."),$scope.analytics[$scope.index]={},$scope.analytics[$scope.index].question=$scope.question,$scope.analytics[$scope.index].attempts=1,$scope.hasHint=!0);var expected,correct=$scope.question.answers.correct;if($scope.isMultipleChoice)expected=$scope.question.answers.MCTF[correct-1];else if($scope.isTF)answer=answer.val,expected=correct;else if($scope.isMA){expected=$scope.question.answers.MA.correct,answer=[],console.log($scope.ansMA);for(var i=0;i<$scope.ansMA.length;i++){var letterIdx=$scope.ansMA[i],idx=$scope.charToNum(letterIdx.toLowerCase())-1,ansDesc=$scope.question.answers.MA.present[i];answer[idx]=ansDesc}if(hasDuplicates($scope.ansMA))return $scope.hasError=!0,void($scope.error="Make sure to make unique selections.");console.log("expected"),console.log(expected),console.log("answer"),console.log(answer)}expected===answer||$scope.isMA&&arraysEqual(expected,answer)?(console.log("Correct!"),console.dir($scope.analytics[$scope.index]),$scope.increment()):(console.log("Incorrect!"),$scope.hasError=$scope.questions[$scope.index].hint.length,$scope.error="Incorrect. Please try again.",$scope.analytics[$scope.index].firstIncorrect||($scope.analytics[$scope.index].firstIncorrect=answer),console.log("First Incorrect",$scope.analytics[$scope.index].firstIncorrect),$scope.analytics[$scope.index].attempts++,console.dir($scope.analytics[$scope.index]))},$scope.increment=function(){if($scope.hasError=!1,$scope.hasHint=!1,$scope.index===max)console.log("Quiz finished."),$scope.isDone=!0,$scope.progress=100,$scope.hasStart=!1;else{if($scope.index=($scope.index+1)%$scope.questions.length,$scope.question=$scope.questions[$scope.index],$scope.hasError=!1,$scope.questions[$scope.index].answers.MA){$scope.numOpts=$scope.questions[$scope.index].answers.MA.present.length;for(var i=$scope.questions[$scope.index].answers.MA.present.length-1;i>=0&&!$scope.questions[$scope.index].answers.MA.present[i].length;i--)$scope.numOpts--}"TF"===$scope.question.type?($scope.answer={val:-1},$scope.isMA=!1,$scope.isTF=!0,$scope.isMultipleChoice=!1):"SC"===$scope.question.type?($scope.isMA=!1,$scope.isMultipleChoice=!0,$scope.isTF=!1,$scope.answer=-1):"MA"===$scope.question.type?($scope.ansMA=[],$scope.isMA=!0,$scope.isMultipleChoice=!1,$scope.isTF=!1):($scope.hasError=!0,$scope.isMA=!1,$scope.isMultipleChoice=!1,$scope.isTF=!1),$scope.numQuestion++,$scope.progress=Math.round(100*($scope.numQuestion-1)/$scope.questions.length)}},$scope.openTab=function(link_url){$window.open(link_url,"_blank")};var byCategory=function(listOfQuestions){console.log("Questions"),$scope.loadedQ=!1,$scope.questions=[];for(var i=0;i<listOfQuestions.length;i++)$scope.questions.push(listOfQuestions[i]);max=$scope.questions.length,$scope.loadedQ=!0,console.log($scope.questions.length+" question(s) found."),console.log($scope.questions),$scope.canStart=$scope.questions.length&&$scope.loggedIn};$scope.getNumber=function(num){return new Array(num)},$scope.numToChar=function(n){return String.fromCharCode(96+parseInt(n)).toUpperCase()},$scope.numToCharArr=function(arr){var ltrArr=[];for(var num in arr)ltrArr.push($scope.numToChar(num));return ltrArr.join(", ")},$scope.charToNum=function(c){return c.charCodeAt(0)-96},$scope.gotoResource=function(subjectName){$location.path("/"+subjectName+"/resources")},$scope.gotoQuiz=function(subjectName){$location.path("/"+subjectName+"/quiz")}}]),angular.module("quiz").controller("QuizResults",["$http","$scope","$stateParams","Authentication",function($http,$scope,$stateParams,Authentication){$scope.comment=null,$scope.authentication=Authentication,$scope.user=$scope.authentication.user,$(document).ready(function(){$("#myBtn").click(function(){$("#myModal").modal()})});var sub=document.getElementsByClassName("btn btn-default btn-success btn-block")[0];sub.onclick=function(){$scope.uploadUserComment()};var studentGrades={category:$stateParams.category,student:{studentName:$scope.user.userName,courses:$scope.user.courses},analytics:$scope.analytics};console.log("User",$scope.user),$scope.uploadUserComment=function(){$scope.comment=$('input[id="comment"]').val();var commentToUpload={category:$stateParams.category,comment:$scope.comment};$http.post("/api/leave_comment",commentToUpload).success(function(res){console.log(res)})},$http.post("/api/quiz_result",studentGrades).success(function(res){console.log(res)})}]),angular.module("quiz").controller("QuizCreate",["$scope","$http","Upload","$timeout",function($scope,$http,Upload,$timeout){$scope.success=!1,$scope.numSave=0,$scope.numDupe=0,$scope.uploadFiles=function(file,errFiles){$scope.f=file,$scope.errFile=errFiles&&errFiles[0];var data={file:file};file&&(file.upload=Upload.upload({url:"/question_upload",data:data}),file.upload.then(function(response){return $scope.numSave=response.data.numSaved,$scope.numDupe=response.data.numDuplicates,$scope.success=$scope.numSave>0||$scope.numDupe>0,$scope.error=response.data.error,$scope.errorMsg=$scope.error?response.data.errorMsg:null,$scope.error?void(file.progress=0):void $timeout(function(){file.result=response.config.data.file.progress})},function(response){response.status>0&&($scope.error=!0,$scope.errorMsg=response.status+": "+response.data)},function(evt){file.progress=Math.min(100,parseInt(100*evt.loaded/evt.total)),100===file.progress||100===file.progress}))}}]),angular.module("quiz").factory("QuizQuestion",["$resource",function($resource){return console.log("quiz factory"),$resource("api/quiz/",{},{getQuestions:{method:"GET",url:"/api/quiz",isArray:!0}})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("teacherProfileTeacherView",{url:"/list/students",templateUrl:"modules/core/client/views/studentProfileTeacherView.client.view.html",params:{username:"Username",email:"email",firstname:"first",lastname:"last"}}).state("studentList",{url:"/list",templateUrl:"modules/users/client/views/studentlist.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","PasswordValidator","Authentication","Subjects","Teachers",function($scope,$state,$http,$location,$window,PasswordValidator,Authentication,Subjects,Teachers){$(document).ready(function(){console.log("Hello"),$("#myBtn").click(function(){$("#myModal").modal()})}),$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.credentials={},$scope.credentials.courses=[],$scope.classNames=[],$scope.Periods=[];var savedCodes=[];Subjects.loadSubjects().then(function(response){$scope.subjects=response.data;for(var i=0;i<$scope.subjects.length;i++)$scope.classNames.push($scope.subjects[i].name);for(var j=1;j<$scope.subjects.length;j++)$scope.Periods.push("Period "+j)}),$scope.newclassNames=["Biotechnology 1","Biotechnology 2","Biotechnology 3","PLTW Principles of Biomedical Science","PLTW Human Body Systems","PLTW Medical Interventions","PLTW Biomedical Innovation","Agricultural Biotechnology","Biology","Honors Biology","AP Biology","AICE Biology","IB Biology","Genetics","Forensics","Other"],$scope.sendMail=function(contactEmail){console.log("Sending registration email!"),console.log(contactEmail);var data={email:contactEmail};console.log(data.email);var route="/api/auth/email";$http.post(route,data).success(function(req,res){console.log("sending email")})},$scope.add=function(course,period){if(console.log("Found course:"+course),""!==course){var courseObj={};courseObj.courseName=course,courseObj.content="",courseObj.progress="",courseObj.section=period,Teachers.loadTeachers().then(function(response){$scope.teachers=response.data;for(var i=0;i<$scope.teachers.length;i++)for(var f=0;f<$scope.teachers[i].courses.length;f++){var number=$scope.teachers[i].courses[f].number;savedCodes.push(number)}for(var posted=!1,match=!1,num=Math.floor(1e3*Math.random()+1);posted===!1;){for(match=!1;match===!1;){num=Math.floor(1e3*Math.random()+1),match=!0;for(var s=0;s<savedCodes.length;s++)if(num===savedCodes[s]){match=!1,console.log("Duplicate Code");break}}console.log("New Course Code Created"),courseObj.number=num,$scope.credentials.courses.push(courseObj),console.log($scope.credentials.courses[0]),posted=!0}})}$scope.toAdd=""},$scope.signup=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$scope.credentials.displayName=$scope.credentials.lastName+", "+$scope.credentials.firstName,$scope.credentials.courses=[parseInt($scope.credentials.courseCode)].length?[parseInt($scope.credentials.courseCode)]:[];var route="/api/auth/signup/teacher";"Student"===$scope.credentials.profileType?(route="/api/auth/signup/student",console.log("Is a student")):"Admin"===$scope.credentials.profileType?(route="/api/auth/signup/teacher",console.log("Is an Admin")):"Teacher"===$scope.credentials.profileType&&(route="/api/auth/signup/teacher",console.log("Is a Teacher")),$http.post(route,$scope.credentials).success(function(response){$scope.authentication.user=response,$location.url("/")}).error(function(response){console.log("Invalid (Sign up)",response),alert("Use a valid course code. For testing, check the database for a teacher and use their course numbers."),$scope.error=response.message})},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go("home")}).error(function(response){console.log("Invalid (Sign in)",response),setTimeout(function(){alert("Invalid Username or Password")},0),$scope.error=response.message}):!1},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url},$scope.authentication.user&&($scope.authentication=Authentication,$scope.isAdmin=!1,$scope.isTeacher=!1,"Admin"===$scope.authentication.user.profileType?(console.log("I am a admin"),$scope.isAdmin=!0):"Teacher"===$scope.authentication.user.profileType&&(console.log("I am a teacher"),$scope.isTeacher=!0))}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("StudentListController",["$rootScope","$scope","$state","$location","$filter","$http","Authentication",function($rootScope,$scope,$state,$location,$filter,$http,Authentication){$scope.$state=$state,$scope.authentication=Authentication,$scope.user="",$scope.email="",$scope.firstname="",$scope.lastname="",$scope.check="hello",$scope.input={},$scope.input.courseNums=[],$scope.authentication.user.courses.forEach(function(element,index,array){$scope.input.courseNums.push(element.number)}),$http.post("/api/data/students",$scope.input).then(function(response){$scope.data=response.data,console.log(response)}),$scope.getName=function(disName){$scope.user=disName.userName,$scope.email=disName.email,$scope.firstname=disName.firstName,$scope.lastname=disName.lastName,console.log("hello"),console.log($scope.user)}}]),angular.module("users").controller("StudentGetController",["$rootScope","$scope","$state","$stateParams","$location","$filter","$http","Authentication",function($rootScope,$scope,$state,$stateParams,$location,$filter,$http,Authentication){$scope.authentication=Authentication,console.log("in state params:"),console.log($stateParams.username),$scope.userFinal=$stateParams.username,$scope.emailFinal=$stateParams.email,$scope.firstnameFinal=$stateParams.firstname,$scope.lastnameFinal=$stateParams.lastname,console.log("Second controller"),console.log($scope.userFinal),console.log($scope.email),console.log($scope.firstname),console.log($scope.lastname)}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.unshift(function(password){var result=PasswordValidator.getResult(password),strengthIdx=0,strengthMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];strengthMeter.length;return result.errors.length<strengthMeter.length&&(strengthIdx=strengthMeter.length-result.errors.length-1),scope.strengthColor=strengthMeter[strengthIdx].color,scope.strengthProgress=strengthMeter[strengthIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,void modelCtrl.$setValidity("strength",!1)):(scope.popoverMsg="",modelCtrl.$setValidity("strength",!0),password)})}}}]),angular.module("users").directive("passwordVerify",function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,modelCtrl){scope.$watch(function(){var combined;return(scope.passwordVerify||modelCtrl.$viewValue)&&(combined=scope.passwordVerify+"_"+modelCtrl.$viewValue),combined},function(value){value&&modelCtrl.$parsers.unshift(function(viewValue){var origin=scope.passwordVerify;return origin!==viewValue?void modelCtrl.$setValidity("passwordVerify",!1):(modelCtrl.$setValidity("passwordVerify",!0),viewValue)})})}}}),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("core").service("Teachers",["$http",function($http){return{loadTeachers:function(){return $http({method:"GET",url:"/api/auth/signup"})}}}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"},parseUsers:{method:"GET",isArray:!0}})}]),angular.module("users").factory("Temps",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"},parseUsers:{method:"GET",isArray:!0}})}]),angular.module("core").factory("Users",["$http",function($http){this.parseUsers=function(){return $http.get("/app/parse/users/").then(function(){console.log("Error checking server.")})}}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"_id"},{update:{method:"PUT"},parseUsers:{method:"GET",isArray:!0}})}]);
"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin"))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){fromState.data&&fromState.data.ignoreState||($state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)})})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("quiz"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("quiz",{url:"/{courseName:.+}/quiz",templateUrl:"modules/quiz/client/views/quizTemplate.client.view.html"}).state("quiz.results",{url:"/results",templateUrl:"modules/quiz/client/views/quizResults.client.view.html",params:{correctScore:null,numQuestion:null,category:null}}).state("resources",{url:"/{courseName:.+}/resources",templateUrl:"modules/core/client/views/resources.client.view.html"}).state("question_upload",{url:"/question_upload",templateUrl:"modules/quiz/client/views/quizUpload.client.view.html"}).state("studentprofile",{url:"/student/{userName:.+}",templateUrl:"modules/core/client/views/profile.client.view.html"}).state("teacherprofile",{url:"/teacher/{userName:.+}",templateUrl:"modules/core/client/views/teacherprofile.client.view.html"}).state("userData",{url:"/data/users",templateUrl:"modules/core/client/views/data.users.client.view.html"}).state("questionData",{url:"/data/questions",templateUrl:"modules/core/client/views/data.questions.client.view.html"}).state("about",{url:"/about",templateUrl:"modules/core/client/views/about.client.view.html"}).state("contact",{url:"/contact",templateUrl:"modules/core/client/views/contact.client.view.html"}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("UserData",["$scope","$http",function($scope,$http){$http.get("/api/data/users").success(function(res){$scope.data=res})}]),angular.module("core").controller("QuestionData",["$scope","$http",function($scope,$http){$http.get("/api/data/questions").success(function(res){$scope.data=res})}]),angular.module("core").controller("SubjectData",["$scope","$http",function($scope,$http){$http.get("/api/parse/subjects").success(function(res){$scope.data=res})}]),angular.module("core").controller("HeaderController",["$scope","$state","$location","Authentication","NavCrumbs",function($scope,$state,$location,Authentication,NavCrumbs){$scope.$state=$state,$scope.authentication=Authentication,$scope.breadcrumb=NavCrumbs.breadcrumb,$scope.click=function(crumb){$location.url(crumb.url)},$scope.profile=function(){"Teacher"===$scope.authentication.user.profileType?$location.url("/teacher/"+$scope.authentication.user.userName):$location.url("/student/"+$scope.authentication.user.userName)},$scope.logout=function(){$scope.authentication.user=null,$location.url("/")}}]),angular.module("core").controller("MainController",["$scope","$state","$location","Authentication","Subjects",function($scope,$state,$location,Authentication,Subjects){$scope.authentication=Authentication,Subjects.loadSubjects().then(function(response){$scope.subjects=response.data}),$scope.gotoQuiz=function(subjectObj){$location.path("/"+subjectObj.name+"/quiz")},$scope.gotoResource=function(subjectObj){$location.path("/"+subjectObj.name+"/resources")}}]),angular.module("core").controller("SubjectController",["$scope","$state","$location","Authentication","$stateParams",function($scope,$state,$location,Authentication,$stateParams){$scope.authentication=Authentication,$scope.subject=$stateParams.courseName,$scope.startQuiz=function(){$location.path("/"+$scope.subject+"/quiz")}}]),angular.module("core").controller("ProfileController",["$scope","$state","$location","Authentication","$http",function($scope,$state,$location,Authentication,$http){$scope.authentication=Authentication,$scope.user=$scope.authentication.user,$scope.oneAtATime=!0,$scope.isTeacher=!1,$scope.profileVisible=!0,"Teacher"===$scope.profileType&&(console.log("I am a teacher"),$scope.isTeacher=!0),$scope.input={},$scope.input.courseNums=[],$scope.authentication.user.courses.forEach(function(element,index,array){$scope.input.courseNums.push(element.courseName+" : "+element.number),console.log($scope.input.courseNames)}),$scope.groups=[{title:"Cells",content:"Lesson 4: The Nucleus",progress:0},{title:"Biology",content:"Lesson 2: Ecosystems",progress:25},{title:"Chemistry",content:"Lesson 13: Electron Mobility",progress:75}],$scope.items=["Item 1","Item 2","Item 3"],$scope.status={isFirstOpen:!0,isFirstDisabled:!1},$scope.$on("creation",function(event,args){console.log(args),$scope.test="TESTING",console.log($scope.section),$scope.section=args.firstName,console.log($scope.section)}),$scope.studentGrades=[],$http.get("/api/quiz_result").success(function(res){console.log("quiz result: ",res),byStudent(res)});var byStudent=function(allStudentGrades){for(var i=0;i<allStudentGrades.length;i++)console.log(allStudentGrades[i].studentName),console.log($scope.user.userName),console.log("BANG: "+allStudentGrades[i].studentName+" "+$scope.user.userName),allStudentGrades[i].studentName===$scope.user.userName&&($scope.studentGrades.push(allStudentGrades[i]),"Applications"===allStudentGrades[i].category&&$scope.groups[0].progress++);$scope.groups[0].progress*=25}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("quiz").directive("readCSVFile",["$parse",function($parse){return console.log("hello"),{restrict:"A",scope:!1,link:function(scope,element,attrs){var fn=$parse(attrs.onReadFile);element.on("change",function(onChangeEvent){var reader=new FileReader;reader.onload=function(onLoadEvent){scope.$apply(function(){fn(scope,{$fileContent:onLoadEvent.target.result})})},reader.readAsText((onChangeEvent.srcElement||onChangeEvent.target).files[0])})}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Subjects",["$http",function($http){return this.questionsForSubject=[{}],this.loadQuestions=function(){$http({method:"GET",url:"/api/question-data/"}).success(function(res){})},this.subjectClicked=function(subject){this.getSubjectByName(subject);this.questionsForSubject=this.loadQuestions()},this.getSubjectByName=function(subjectName){return this.subjects.forEach(function(elem,index,array){return elem.name===subjectName?elem:void 0}),null},{loadSubjects:function(){return $http({method:"GET",url:"/api/parse/subjects"})}}}]),angular.module("core").service("NavCrumbs",[function(){this.breadcrumb=[{name:"Home",url:"/"}]}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("quiz").config(["$stateProvider",function($stateProvider){}]),angular.module("quiz").controller("QuizController",["$scope","QuizQuestion","$stateParams","$state","Authentication","$http",function($scope,QuizQuestion,$stateParams,$state,Authentication,$http){$scope.authentication=Authentication,console.log($scope.authentication.user),$scope.isDone=!1,$scope.isStart=!1,$scope.questions=[];var max=0;$scope.isMultipleChoice=!1,$scope.index=-1,$scope.score=0,$scope.numQuestion=0,$scope.hasError=!1,$scope.hasStart=!0,$scope.currCategory=$stateParams.courseName,$scope.start=function(){0===max?(console.log(max),$scope.hasError=!0,$scope.hasStart=!1):($scope.isStart=!0,$scope.increment(),max=$scope.questions.length-1)},$scope.checkAnswer=function(answer){console.log("Check answer"),$scope.questions[$scope.index].correctAnswer===answer&&$scope.score++,$scope.increment()},$scope.increment=function(){$scope.index===max?(console.log("Done"),$scope.isDone=!0,$scope.isStart=!1,$scope.hasStart=!1):($scope.index=($scope.index+1)%$scope.questions.length,"TF"===$scope.questions[$scope.index].questionType?$scope.isMultipleChoice=!1:$scope.isMultipleChoice=!0,$scope.numQuestion++)},$http.get("/api/quiz",{params:{category:$stateParams.courseName}}).then(function(listOfQuestions){console.log("List of questions: "+listOfQuestions.data),byCategory(listOfQuestions.data)}),console.log("Category before the switch to applications: "+$scope.currCategory),$scope.currCategory="Applications";var byCategory=function(listOfQuestions){console.log("By category");for(var i=0;i<listOfQuestions.length;i++)listOfQuestions[i].category===$scope.currCategory&&$scope.questions.push(listOfQuestions[i]);max=$scope.questions.length}}]),angular.module("quiz").controller("QuizResults",["$http","$scope","$stateParams","Authentication",function($http,$scope,$stateParams,Authentication){$scope.authentication=Authentication,$scope.user=$scope.authentication.user,$scope.score=$stateParams.correctScore,$scope.totalNumQuestion=$stateParams.numQuestion;var studentGrades={category:$stateParams.category,studentName:$scope.user.userName,score:$scope.score,totalNum:$stateParams.numQuestion};console.log($scope.user.userName+" "+$stateParams.correctScore+" "+$stateParams.category),$http.post("/api/quiz_result",studentGrades).success(function(res){console.log(res)})}]),angular.module("quiz").controller("QuizCreate",["$scope","QuizQuestion",function($scope,QuizQuestion){$scope.uploadQuestions=function($fileContent){var fileText=$fileContent,rows=fileText.split("\n"),obj=[];angular.forEach(rows,function(val){var o=val.split(",");if("Category"!==o[0]){console.log(o);var quizQuestion;quizQuestion=new QuizQuestion("TF"===o[1]?{category:o[0],questionType:o[1],description:o[2],correctAnswer:o[3]}:{category:o[0],questionType:o[1],description:o[2],correctAnswer:o[3],answerDesc1:o[4],answerDesc2:o[5],answerDesc3:o[6],answerDesc4:o[7]}),obj=quizQuestion,quizQuestion.$save(function(response){console.log("save done")},function(errorResponse){console.log("Error occured"+errorResponse.data.message)})}}),$scope.content=obj}}]),angular.module("quiz").directive("onReadCsv",["$parse",function($parse){return{restrict:"A",scope:!1,link:function(scope,element,attrs){var fn=$parse(attrs.onReadCsv);element.on("change",function(onChangeEvent){var reader=new FileReader;reader.onload=function(onLoadEvent){scope.$apply(function(){fn(scope,{$fileContent:onLoadEvent.target.result})})},reader.readAsText((onChangeEvent.srcElement||onChangeEvent.target).files[0])})}}}]),angular.module("quiz").factory("QuizQuestion",["$resource",function($resource){return $resource("api/quiz/",{},{getQuestions:{method:"GET",url:"/api/quiz",isArray:!0}})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("teacherProfileTeacherView",{url:"/list/students",templateUrl:"modules/core/client/views/studentProfileTeacherView.client.view.html",params:{username:"Username",email:"email",firstname:"first",lastname:"last"}}).state("studentList",{url:"/list",templateUrl:"modules/users/client/views/studentlist.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","PasswordValidator","Authentication","Subjects",function($scope,$state,$http,$location,$window,PasswordValidator,Authentication,Subjects){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.credentials={},$scope.credentials.courses=[],$scope.classNames=[],Subjects.loadSubjects().then(function(response){$scope.subjects=response.data;for(var i=0;i<$scope.subjects.length;i++)$scope.classNames.push($scope.subjects[i].name)}),$scope.add=function(course){if(""!==course){var courseObj={};courseObj.courseName=course,courseObj.content="",courseObj.progress="",courseObj.section="",courseObj.number=Math.floor(1e3*Math.random()+1),$scope.credentials.courses.push(courseObj)}$scope.toAdd=""},$scope.signup=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$scope.credentials.displayName=$scope.credentials.lastName+", "+$scope.credentials.firstName,console.log($scope.credentials);var route="/api/auth/signup/";"Student"===$scope.credentials.profileType&&(route="/api/auth/signup/student",console.log("Is a student")),$http.post(route,$scope.credentials).success(function(response){$scope.authentication.user=response,$location.url("/")}).error(function(response){console.log("invalid"),setTimeout(function(){alert("Error: Enter valid information")},0),$scope.error=response.message,console.log(response)})},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go("home")}).error(function(response){console.log("invalid"),setTimeout(function(){alert("Invalid Username or Password")},0),$scope.error=response.message}):!1},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("StudentListController",["$rootScope","$scope","$state","$location","$filter","$http","Authentication",function($rootScope,$scope,$state,$location,$filter,$http,Authentication){$scope.$state=$state,$scope.authentication=Authentication,$scope.user="",$scope.email="",$scope.firstname="",$scope.lastname="",$scope.check="hello",$scope.input={},$scope.input.courseNums=[],$scope.authentication.user.courses.forEach(function(element,index,array){$scope.input.courseNums.push(element.number)}),$http.post("/api/data/students",$scope.input).then(function(response){$scope.data=response.data,console.log(response)}),$scope.getName=function(disName){$scope.user=disName.userName,$scope.email=disName.email,$scope.firstname=disName.firstName,$scope.lastname=disName.lastName,console.log("hello"),console.log($scope.user)}}]),angular.module("users").controller("StudentGetController",["$rootScope","$scope","$state","$stateParams","$location","$filter","$http","Authentication",function($rootScope,$scope,$state,$stateParams,$location,$filter,$http,Authentication){$scope.authentication=Authentication,console.log("in state params:"),console.log($stateParams.username),$scope.userFinal=$stateParams.username,$scope.emailFinal=$stateParams.email,$scope.firstnameFinal=$stateParams.firstname,$scope.lastnameFinal=$stateParams.lastname,console.log("Second controller"),console.log($scope.userFinal),console.log($scope.email),console.log($scope.firstname),console.log($scope.lastname)}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.unshift(function(password){var result=PasswordValidator.getResult(password),strengthIdx=0,strengthMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];strengthMeter.length;return result.errors.length<strengthMeter.length&&(strengthIdx=strengthMeter.length-result.errors.length-1),scope.strengthColor=strengthMeter[strengthIdx].color,scope.strengthProgress=strengthMeter[strengthIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,void modelCtrl.$setValidity("strength",!1)):(scope.popoverMsg="",modelCtrl.$setValidity("strength",!0),password)})}}}]),angular.module("users").directive("passwordVerify",function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,modelCtrl){scope.$watch(function(){var combined;return(scope.passwordVerify||modelCtrl.$viewValue)&&(combined=scope.passwordVerify+"_"+modelCtrl.$viewValue),combined},function(value){value&&modelCtrl.$parsers.unshift(function(viewValue){var origin=scope.passwordVerify;return origin!==viewValue?void modelCtrl.$setValidity("passwordVerify",!1):(modelCtrl.$setValidity("passwordVerify",!0),viewValue)})})}}}),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);